Timer unit: 1e-06 s

Total time: 0.003231 s
File: main.py
Function: line_intersection at line 1

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     1                                           @profile
     2                                           def line_intersection(line1, line2):
     3       381        403.0      1.1     12.5      line_type1 = 'hor' if line1[0][1] == line1[1][1] else 'vert'
     4       381        388.0      1.0     12.0      line_type2 = 'hor' if line2[0][1] == line2[1][1] else 'vert'
     5       381        311.0      0.8      9.6      if line_type1 == line_type2:
     6       200        157.0      0.8      4.9          dim = 0 if line_type1 == 'hor' else 1
     7       200        262.0      1.3      8.1          range1 = sorted([line1[0][dim], line1[1][dim]])
     8       200        255.0      1.3      7.9          range2 = sorted([line2[0][dim], line2[1][dim]])
     9       200        230.0      1.1      7.1          if line1[0][1-dim] == line2[0][1-dim]:
    10         4         16.0      4.0      0.5              if any([range2[0] <= elem <= range2[1] for elem in range1]):
    11                                                           return True
    12         4         11.0      2.8      0.3              elif any([range1[0] <= elem <= range1[1] for elem in range2]):
    13                                                           return True
    14       200        145.0      0.7      4.5          return False
    15                                               else:
    16       181        155.0      0.9      4.8          dim1 = 0 if line_type1 == 'hor' else 1
    17       181        174.0      1.0      5.4          dim2 = 0 if line_type2 == 'hor' else 1
    18       181        263.0      1.5      8.1          range1 = sorted([line1[0][dim1], line1[1][dim1]])
    19       181        234.0      1.3      7.2          range2 = sorted([line2[0][dim2], line2[1][dim2]])
    20       181        227.0      1.3      7.0          return (range2[0] <= line1[0][dim2] <= range2[1]) and (range1[0] <= line2[0][dim1] <= range1[1] )

Total time: 0.000163 s
File: main.py
Function: PolygonArea at line 22

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    22                                           @profile
    23                                           def PolygonArea(corners):
    24                                               # ShoeLace Algorithm
    25         4          2.0      0.5      1.2      n = len(corners)
    26         4          1.0      0.2      0.6      area = 0.0
    27        58         34.0      0.6     20.9      for i in range(n):
    28        54         30.0      0.6     18.4          j = (i + 1) % n
    29        54         47.0      0.9     28.8          area += corners[i][0] * corners[j][1]
    30        54         42.0      0.8     25.8          area -= corners[j][0] * corners[i][1]
    31         4          3.0      0.8      1.8      area = abs(area) / 2.0
    32         4          4.0      1.0      2.5      return int(area)

Total time: 0.000136 s
File: main.py
Function: get_dir at line 34

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    34                                           @profile
    35                                           def get_dir(dir, dim, turn):
    36        60         76.0      1.3     55.9      dir = dir * (-1)**((dim + (turn != 'R'))+1)
    37        60         32.0      0.5     23.5      dim = 1 - dim
    38        60         28.0      0.5     20.6      return dir, dim

Total time: 0.010595 s
File: main.py
Function: mouse_path at line 40

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    40                                           @profile
    41                                           def mouse_path(path):
    42                                               # Parsing Text
    43         6         17.0      2.8      0.2      moves = []
    44         6          6.0      1.0      0.1      move_length = ''
    45         6          4.0      0.7      0.0      str_index = 0
    46         6          5.0      0.8      0.0      previous_char = None
    47       207        215.0      1.0      2.0      while str_index < len(path):
    48       201        165.0      0.8      1.6          current_char = path[str_index]
    49       201        192.0      1.0      1.8          if current_char.isalpha():
    50        72        113.0      1.6      1.1              moves.append((previous_char, int(move_length)))
    51        72         48.0      0.7      0.5              move_length = ''
    52        72         65.0      0.9      0.6              previous_char = current_char
    53                                                   else:
    54       129        100.0      0.8      0.9              move_length += current_char
    55       201        175.0      0.9      1.7          str_index += 1
    56                                           
    57         6          5.0      0.8      0.0      if len(move_length) > 0:
    58         6          6.0      1.0      0.1          moves.append((previous_char, int(move_length)))
    59                                           
    60                                               # Initialising Coordinates
    61         6          6.0      1.0      0.1      coordinates = [[0, 0]]
    62         6          6.0      1.0      0.1      current_position = [0, 0]
    63                                               # Initial dimension in which the mouse is moving
    64                                               # As a convention R is increase and L is decreasing
    65                                           
    66         6          5.0      0.8      0.0      dim = 0
    67         6          4.0      0.7      0.0      dir = 1
    68        70         74.0      1.1      0.7      for move_index, move in enumerate(moves):
    69        66         56.0      0.8      0.5          if move[0] is not None:
    70        60        420.0      7.0      4.0              dir, dim = get_dir(dir, dim, move[0])
    71        66         57.0      0.9      0.5          dir_vector = [0, 0]
    72        66         55.0      0.8      0.5          dir_vector[dim] = dir
    73        66         75.0      1.1      0.7          current_position[dim] += dir * move[1]
    74        66         82.0      1.2      0.8          coordinates.append(list(current_position))
    75        66         70.0      1.1      0.7          new_line = coordinates[-2:]
    76        66         47.0      0.7      0.4          if move_index > 2:
    77       427        354.0      0.8      3.3              for index in range(move_index-1):
    78       381        344.0      0.9      3.2                  line_1 = coordinates[index: index+2]
    79       381       7300.0     19.2     68.9                  intersect = line_intersection(line_1, new_line)
    80       381        253.0      0.7      2.4                  if intersect and not(index == 0 and move_index == len(moves) - 1):
    81         2          2.0      1.0      0.0                      return None
    82                                               # Computing area
    83         4        266.0     66.5      2.5      area = PolygonArea(coordinates)
    84         4          3.0      0.8      0.0      return area

